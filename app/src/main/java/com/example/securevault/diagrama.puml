@startuml
package com.example.securevault {
    package utils {
        enum FilePickerType {
            FILE
            FOLDER
        }
        class FilePicker {
            - activity: AppCompatActivity?
            - fragment: Fragment?
            - onFileSelected: (Uri) -> Unit
            - launcher: ActivityResultLauncher<Intent>
            + launch(type: FilePickerType, mimeType: String? = null)
        }
    }
    package ui.viewmodel {
        class SettingsViewModel {
            - isBiometricConfigured: IsBiometricConfigured
            - deleteAllPasswords: DeleteAllPasswords
            - backupManager: BackupManager
            - getAllPasswords: GetAllPasswords
            - dispatchers: DispatcherProvider
            - _backup: MutableStateFlow<Boolean?>
            + backup: StateFlow<Boolean?>
            - _loadBackup: MutableStateFlow<Boolean?>
            + loadBackup: StateFlow<Boolean?>
            + isBiometric(): Boolean
            + clearPasswords()
            + loadBackup(uri: Uri)
            + createBackup()
            + isBackupEnabled(): Boolean
            + enableBackup()
            + disableBackup()
            + getBackupLocation(): Uri?
            + setBackupLocation(uri: Uri)
        }
        class RegisterViewModel {
            - estimatePassword: EstimatePassword
            - generateAppKey: GenerateAppKey
            - isAppKeyConfigured: IsAppKeyConfigured
            - _passwordStrength: MutableLiveData<PasswordStrength>
            + passwordStrength: LiveData<PasswordStrength>
            + calculateStrength(password: String)
            + createAppKey(password: String)
            + isKeyConfigured(): Boolean
        }
        class MainViewModel {
            - isAppKeyConfigured: IsAppKeyConfigured
            + isKeyConfigured(): Boolean
        }
        class LoginViewModel {
            - unlockKeyWithPassword: UnlockKeyWithPassword
            - unlockKeyWithBiometrics: UnlockKeyWithBiometrics
            - isBiometricConfigured: IsBiometricConfigured
            - authenticateBiometrics: AuthenticateBiometrics
            - getDecryptCryptoObject: GetDecryptCryptoObject
            - dispatchers: DispatcherProvider
            - title: String
            - description: String
            - _biometricLoginState: MutableStateFlow<Boolean?>
            + biometricLoginState: StateFlow<Boolean?>
            - _passwordLoginState: MutableStateFlow<Boolean?>
            + passwordLoginState: StateFlow<Boolean?>
            - cryptoObjectDeferred: Lazy<Deferred<CryptoObject?>>
            + login(password: String)
            + login(activity: AppCompatActivity)
            + isBiometricKeyConfigured(): Boolean
        }
        class HomeViewModel {
            - getAllPasswords: GetAllPasswords
            - getPasswordsByName: GetPasswordsByName
            - dispatchers: DispatcherProvider
            - _passwords: MutableStateFlow<List<PasswordDto>>
            + passwords: StateFlow<List<PasswordDto>>
            - getPasswords(): List<PasswordDto>
            + loadPasswords(name: String)
            + loadPasswords()
            - getPasswordsByNameIgnoreCase(name: String): List<PasswordDto>
        }
        class BiometricViewModel {
            - generateBiometricKey: GenerateBiometricKey
            - authenticateBiometrics: AuthenticateBiometrics
            - getEncryptCryptoObject: GetEncryptCryptoObject
            - title: String
            - description: String
            - _authenticationState: MutableLiveData<BiometricResult?>
            + authenticationState: LiveData<BiometricResult?>
            + enableBiometric(activity: AppCompatActivity)
            - generateKey(result: BiometricResult)
        }
    }
    package ui.view {
        class SettingsActivity {
            - binding: SettingsActivityBinding
            - viewModel: SettingsViewModel
            - folderPicker: FilePicker
            - filePicker: FilePicker
            # onCreate(savedInstanceState: Bundle?)
            # onResume()
            - checkBackupButtons()
            - observeBackupState()
            - checkAutofill()
            - checkBiometric()
            - setListeners()
            - updateBackupLocationText()
            - requestAutofillService()
            - hasEnabledAutofill(): Boolean
        }
        class RegisterActivity {
            - binding: CreateMasterPasswordBinding
            - viewModel: RegisterViewModel
            - label: String
            # onCreate(savedInstanceState: Bundle?)
            - changeProgressBar(strength: PasswordStrength)
            - setObserver()
            - setListener()
            - setAfterTextChanged()
            - biometricActivity()
        }
        class MainActivity {
            - binding: ScreenHomeBinding
            - viewModel: MainViewModel
            # onCreate(savedInstanceState: Bundle?)
            - setListeners()
            - isLoggedIn(): Boolean
            - login()
        }
        class LoginActivity {
            - binding: LoginScreenBinding
            - viewModel: LoginViewModel
            # onCreate(savedInstanceState: Bundle?)
            - setObserversPassword()
            - setObserversBiometric()
            - setListeners()
            - skip()
        }
        class HomeActivity {
            - isSearchMode: Boolean
            - binding: MainScreenBinding
            - viewModel: HomeViewModel
            - passwordAdapter: PasswordAdapter
            + {static} PASSWORD_RELOAD_REQUEST_KEY: String
            # onCreate(savedInstanceState: Bundle?)
            # onResume()
            - setObservers()
            - setListeners()
            - setupRecyclerView()
            - enterSearchMode()
            - exitSearchMode()
        }
        class BiometricActivity {
            - binding: BiometricSugestionBinding
            - viewModel: BiometricViewModel
            # onCreate(savedInstanceState: Bundle?)
            - setObservers()
            - setListeners()
            - skip()
        }
    }
    package ui.view.dialogs {
        class ChangeMasterPasswordDialog {
            - binding: CreateMasterPasswordBinding
            - viewModel: RegisterViewModel
            - label: String
            + onCreateDialog(savedInstanceState: Bundle?): Dialog
            - changeProgressBar(strength: PasswordStrength)
            - setObserver()
            - setListeners()
            - setAfterTextChanged()
        }
        class CreatePasswordDialog {
            - binding: CreatePasswordDialogBinding
            - viewModel: CreatePasswordViewModel
            - supportFragmentManager: FragmentManager
            + onCreateDialog(savedInstanceState: Bundle?): Dialog
            - setListeners()
            - getPassword(): PasswordDto?
            - showToast(field: String)
        }
        class ExportPasswordDialog {
            - binding: DialogExportBinding
            - filePicker: FilePicker
            - folderUri: Uri?
            - viewModel: ExportPasswordViewModel
            + onCreateDialog(savedInstanceState: Bundle?): Dialog
            - setListeners()
            - observeLoadingState()
            - showToast(message: String)
            - handleFile(folderUri: Uri)
            - selectFolder()
            - getFolderNameFromUri(uri: Uri): String?
            - setPasswordInput()
            - getPassword(): String?
        }
        class GeneratePasswordDialog {
            - binding: PasswordGeneratorBinding
            - viewModel: GeneratePasswordViewModel
            + {static} REQUEST_KEY: String
            + onCreateDialog(savedInstanceState: Bundle?): Dialog
            - setListeners()
            - setUpView()
            - setObservers()
            - changeStrengthBar(strength: PasswordStrength)
            - generatePassword()
            - generatePassphrase()
        }
        class ImportPasswordDialog {
            - binding: DialogImportBinding
            - filePicker: FilePicker
            - fileUri: Uri?
            - viewModel: ImportPasswordViewModel
            + {static} - ENCRYPTED: String
            + {static} - CSV: String
            + onCreateDialog(savedInstanceState: Bundle?): Dialog
            - setPasswordInput()
            - getFileNameFromUri(uri: Uri): String?
            - setListeners()
            - openFile(fileType: String)
            - handleFile(uri: Uri)
            - observeLoadingState()
            - observeErrorState()
            - showToast(message: String)
        }
        class PasswordDetailDialog {
            - binding: PasswordDetailBinding
            - viewModel: PasswordDetailViewModel
            - passwordDto: PasswordDto
            + onCreateDialog(savedInstanceState: Bundle?): Dialog
            - setContent()
            - setListeners()
            - getPassword(): PasswordDto?
            - showToast(field: String)
        }
    }

    package ui.viewmodel.dialogs {
        class PasswordDetailViewModel {
            - addPassword: AddPassword
            - deletePassword: DeletePassword
            + savePassword(password: PasswordDto)
            + savePassword(previousName: String, password: PasswordDto)
            + removePassword(password: PasswordDto)
        }
        class ImportPasswordViewModel {
            - getPasswordsFromEncrypted: GetPasswordsFromEncrypted
            - readCsv: ReadCsv
            - saveAllPasswords: InsertAllPasswords
            - dispatcherProvider: DispatcherProvider
            - _loading: MutableStateFlow<Boolean>
            + loading: StateFlow<Boolean>
            - _importState: MutableStateFlow<ImportState?>
            + importState: StateFlow<ImportState?>
            - insertAllPasswords(passwords: List<PasswordDto>)
            + insertAllPasswords(encryptedPasswords: String, key: String)
            + insertAllPasswords(uri: Uri)
            + clearError()
        }
        class GeneratePasswordViewModel {
            - generatePassword: GeneratePassword
            - generatePassphrase: GeneratePassphrase
            - estimatePassword: EstimatePassword
            - dispatcherProvider: DispatcherProvider
            - _password: MutableStateFlow<String>
            + password: StateFlow<String>
            - _passwordStrength: MutableStateFlow<PasswordStrength>
            + passwordStrength: StateFlow<PasswordStrength>
            - _isLoading: MutableStateFlow<Boolean>
            + isLoading: StateFlow<Boolean>
            + getPassword(length: Int, lower: Boolean, upper: Boolean, numbers: Boolean, symbols: Boolean)
            + getPassphrase(length: Int, delimiter: String)
        }
        class ExportPasswordViewModel {
            - context: Context
            - writeCsv: WriteCsv
            - writeSv: WriteSv
            - getAllPasswords: GetAllPasswords
            - dispatchers: DispatcherProvider
            - fileNameCsv: String
            - fileNameSv: String
            - _loading: MutableStateFlow<Boolean>
            + loading: StateFlow<Boolean>
            + createCsv(folderUri: Uri)
            + createSv(folderUri: Uri, password: String)
            - createFileInFolder(folderUri: Uri, fileName: String, mimeType: String): Uri?
        }
        class CreatePasswordViewModel {
            - addPassword: AddPassword
            + savePassword(passwordDto: PasswordDto)
        }
    }
    package data.autofill {
        object Fetch {
            + {static} fetchPassword(appPackage: String, passwordRepository: PasswordRepository): Pair<String, String>?
        }
        class SecureVaultAutofillService {
            - passwordRepository: PasswordRepository?
            + storage: PasswordStorage
            + encryptor: FileEncryptor
            + onFillRequest(request: FillRequest, cancellationSignal: CancellationSignal, callback: FillCallback)
            + onSaveRequest(request: SaveRequest, callback: SaveCallback)
        }
        object StructureParser {
            + {static} parseStructure(structure: AssistStructure): ParsedStructure?
            - {static} traverseViewNode(node: AssistStructure.ViewNode, action: (AssistStructure.ViewNode) -> Unit)
        }
        class ParsedStructure {
            + usernameId: AutofillId
            + passwordId: AutofillId
        }
    }
    package data.crypto {
        object AppKeyEncryptor {
            + {static} encrypt(data: ByteArray, key: SecretKey): Pair<ByteArray, ByteArray>
            + {static} decrypt(encrypted: ByteArray, key: SecretKey, iv: ByteArray): ByteArray
            + {static} encrypt(data: ByteArray, cipher: Cipher?): Pair<ByteArray, ByteArray>
            + {static} decrypt(encrypted: ByteArray, cipher: Cipher): ByteArray
        }
        object AppKeyProvider {
            - appKey: ByteArray?
            - mutex: Mutex
            + {static} generate(): ByteArray
            + {static} load(decryptedKey: ByteArray)
            + {static} getAppKey(): ByteArray
        }
        object BiometricKeyManager {
            - {static} KEY_ALIAS: String
            - {static} ANDROID_KEYSTORE: String
            + {static} generateKey()
            - {static} getKey(): SecretKey
            - {static} getEncryptCipher(): Cipher
            - {static} getDecryptCipher(iv: ByteArray): Cipher
            + {static} getEncryptCryptoObject(): BiometricPrompt.CryptoObject?
            + {static} getDecryptCryptoObject(iv: ByteArray): BiometricPrompt.CryptoObject
        }
        object PasswordKeyManager {
            + {static} generateSalt(): ByteArray
            + {static} deriveKey(password: String, salt: ByteArray): SecretKey
        }
    }
    package data.csv {
        package formatter {
            class CsvFormatter {
                + {static} SEPARATOR: Char
                + {static} HEADER: String
                - parsePassword(password: Password): String
                - unparsePassword(password: String): Password
                + parsePasswordsWithHeader(passwords: List<Password>): String
                + unparsePasswordsWithHeader(passwords: String): List<Password>
            }
        }
        package storage {
            class CsvStorage {
                - context: Context
                - csvFormatter: CsvFormatter
                + writeCsv(fileName: Uri, passwords: List<Password>)
                + readCsv(uri: Uri): List<Password>
            }
        }
    }
    package data.generator {
        object PasswordGenerator {
            + {static} LOWER: String
            + {static} UPPER: String
            + {static} NUMBERS: String
            + {static} SYMBOL: String
            + {static} generatePassword(length: Int = 16, lower: Boolean = true, upper: Boolean = true, numbers: Boolean = true, symbols: Boolean = true): String?
            + {static} generatePassphrase(length: Int = 5, delimiter: String): String
        }
    }
    package data.json {
        package crypto {
            class FileEncryptor {
                - type: java.lang.reflect.Type
                - adapter: JsonAdapter<List<Password>>
                - encryptFile(content: String, password: String): String
                - decryptFile(encryptedFile: String, password: String): String
                + encryptPasswords(passwords: List<Password>, userPassword: String): String
                + decryptPasswords(encryptedPasswords: String, userPassword: String): List<Password>
            }
        }
        package model {
            class Password {
                + name: String
                + url: String
                + username: String
                + value: String
            }
        }
        package storage {
            class PasswordStorage {
                - context: Context
                - fileName: String
                + saveEncryptedFile(encryptedFile: String)
                + readEncryptedFile(): String?
            }
        }
    }
    package data.mapper {
        object PasswordMapper {
            + {static} mapToDto(password: Password): PasswordDto
            + {static} mapToEntity(passwordDto: PasswordDto): Password
        }
    }
    package data.repository {
        class MasterPasswordRepositoryImpl {
            - storage: AppKeyStorage
            + generateAndStoreAppKey(password: String)
            + generateAndStoreAppKeyBio(result: BiometricResult)
            + unlockAppKeyWithPassword(password: String): Boolean
            + unlockAppKeyWithBiometrics(result: BiometricResult): Boolean
            + isAppKeyConfigured(): Boolean
            + isBiometricConfigured(): Boolean
            + getIv(): ByteArray
        }
        class PasswordRepositoryImpl {
            - storage: PasswordStorage
            - encryptor: FileEncryptor
            - cachePasswords: MutableList<Password>
            + getAllPasswords(): List<Password>
            - getAppKey(): String
            + getPasswordByName(name: String): Password?
            + getPasswordByNameContainingIgnoreCase(name: String): List<Password>
            + insertPassword(password: Password)
            + insertAllPasswords(passwords: List<Password>)
            - insertPasswordCache(name: String, password: Password)
            + insertPassword(previousName: String, password: Password)
            + deletePassword(password: Password)
            + deleteAllPasswords()
            - loadPasswords(): List<Password>
            + reloadPasswords()
            - savePasswordsFromCache()
        }
    }
    package data.storage {
        class AppKeyStorage {
            - prefs: SharedPreferences
            + save(name: String, data: ByteArray)
            + getFromSharedPreferences(name: String): ByteArray
            + isPasswordConfigured(): Boolean
            + isBiometricConfigured(): Boolean
        }
        class BackupStorage {
            - context: Context
            - prefs: SharedPreferences
            - {static} LOCATION: String
            - {static} ENABLED: String
            + saveLocation(uri: Uri)
            + getLocation(): Uri?
            + enableBackup()
            + disableBackup()
            + isBackupEnabled(): Boolean
        }
    }
    package di {
        class DefaultDispatcherProvider {
            + io: CoroutineDispatcher
            + main: CoroutineDispatcher
            + default: CoroutineDispatcher
            + unconfined: CoroutineDispatcher
        }
        object DispatcherModule {
            + {static} provideDispatcherProvider(): DispatcherProvider
        }
        interface DispatcherProvider {
            + io: CoroutineDispatcher
            + main: CoroutineDispatcher
            + default: CoroutineDispatcher
            + unconfined: CoroutineDispatcher
        }
        object MasterPasswordRepositoryModule {
            + {static} provideMasterPasswordRepository(storage: AppKeyStorage): MasterPasswordRepository
        }
        object MoshiModule {
            + {static} provideMoshi(): Moshi
        }
        object NbvcxzModule {
            + {static} provideNbvcxz(): Nbvcxz
        }
        object PasswordRepositoryModule {
            + {static} providePasswordRepository(storage: PasswordStorage, encryptor: FileEncryptor): PasswordRepository
        }
    }
    package domain.backup {
        class BackupManager {
            - context: Context
            - backupStorage: BackupStorage
            - encryptor: FileEncryptor
            - readSv: ReadSv
            - passwordRepository: PasswordRepository
            - dispatchers: DispatcherProvider
            - {static} BACKUP_FILE_PREFIX: String
            - {static} BACKUP_FILE_EXTENSION: String
            - {static} MIME_TYPE: String
            + isBackupEnabled(): Boolean
            + enableBackup()
            + disableBackup()
            + setBackupLocation(uri: Uri)
            + getBackupLocation(): Uri?
            + createBackupIfEnabled(passwords: List<Password>): Boolean
            + loadBackup(uri: Uri)
            - createBackup(folderUri: Uri, passwords: List<Password>): Boolean
        }
    }
    package domain.biometric {
        interface BiometricAuthenticator {
            + promptResults: Flow<BiometricResult>
            + showBiometricPrompt(title: String, description: String, cryptoObject: BiometricPrompt.CryptoObject? = null)
        }
    }
    package domain.model {
        interface BiometricResult {
            object HardwareNotAvailable
            object FeatureUnavailable
            class AuthenticationError {
                + error: String
            }
            object AuthenticationFailed
            class AuthenticationSuccess {
                + result: BiometricPrompt.AuthenticationResult?
            }
            object AuthenticationNotRecognized
        }
        interface ImportState {
            object WrongPassword
            object CsvFormatError
            object Success
        }
        class PasswordDto {
            + name: String
            + url: String
            + username: String
            + value: String
        }
        enum PasswordStrength {
            VERY_WEAK
            WEAK
            MEDIUM
            STRONG
            VERY_STRONG
            - score: Int
            + label: String
            + color: String
            + progress: Int
            + colorInt: Int
            + {static} fromScore(score: Int): PasswordStrength
        }
    }
    package domain.repository {
        interface MasterPasswordRepository {
            + {abstract} generateAndStoreAppKey(password: String)
            + {abstract} generateAndStoreAppKeyBio(result: BiometricResult)
            + {abstract} unlockAppKeyWithPassword(password: String): Boolean
            + {abstract} unlockAppKeyWithBiometrics(result: BiometricResult): Boolean
            + {abstract} isAppKeyConfigured(): Boolean
            + {abstract} isBiometricConfigured(): Boolean
            + {abstract} getIv(): ByteArray
        }
        interface PasswordRepository {
            + {abstract} getAllPasswords(): List<Password>
            + {abstract} getPasswordByName(name: String): Password?
            + {abstract} getPasswordByNameContainingIgnoreCase(name: String): List<Password>
            + {abstract} insertPassword(password: Password)
            + {abstract} insertPassword(previousName: String, password: Password)
            + {abstract} insertAllPasswords(passwords: List<Password>)
            + {abstract} deletePassword(password: Password)
            + {abstract} deleteAllPasswords()
        }
    }
    package domain.usecases {
        class EstimatePassword {
            - nbvcxz: Nbvcxz
            + invoke(password: String): PasswordStrength
        }
        package auth {
            class AuthenticateBiometrics {
                + invoke(biometricAuthenticator: BiometricAuthenticator, title: String, description: String, cryptoObject: BiometricPrompt.CryptoObject?)
            }
            class GenerateAppKey {
                - repo: MasterPasswordRepository
                + invoke(password: String)
            }
            class GenerateBiometricKey {
                - repo: MasterPasswordRepository
                + invoke(result: BiometricResult)
            }
            class GetDecryptCryptoObject {
                - masterPasswordRepository: MasterPasswordRepository
                + invoke(): BiometricPrompt.CryptoObject
            }
            class GetEncryptCryptoObject {
                + invoke(): BiometricPrompt.CryptoObject?
            }
            class IsAppKeyConfigured {
                - repo: MasterPasswordRepository
                + invoke(): Boolean
            }
            class IsBiometricConfigured {
                - repo: MasterPasswordRepository
                + invoke(): Boolean
            }
            class UnlockKeyWithBiometrics {
                - repo: MasterPasswordRepository
                + invoke(result: BiometricResult): Boolean
            }
            class UnlockKeyWithPassword {
                - repo: MasterPasswordRepository
                + invoke(password: String): Boolean
            }
        }
        package csv {
            class ReadCsv {
                - csvStorage: CsvStorage
                + invoke(uri: Uri): List<PasswordDto>
            }
            class WriteCsv {
                - csvStorage: CsvStorage
                + invoke(uri: Uri, passwords: List<PasswordDto>)
            }
        }
        package generator {
            class GeneratePassphrase {
                + invoke(length: Int, delimiter: String): String
            }
            class GeneratePassword {
                + invoke(length: Int, lower: Boolean, upper: Boolean, numbers: Boolean, symbols: Boolean): String
            }
        }
        package password {
            class AddPassword {
                - passwordRepository: PasswordRepository
                + invoke(previousName:String, password: PasswordDto)
                + invoke(password: PasswordDto)
            }
            class DeleteAllPasswords {
                - passwordRepository: PasswordRepository
                + invoke()
            }
            class DeletePassword {
                - passwordRepository: PasswordRepository
                + invoke(passwordDto: PasswordDto)
            }
            class GetAllPasswords {
                - passwordRepository: PasswordRepository
                + invoke(): List<PasswordDto>
            }
            class GetPasswordsByName {
                - passwordRepository: PasswordRepository
                + invoke(name: String): List<PasswordDto>
            }
            class GetPasswordsFromEncrypted {
                - fileEncryptor: FileEncryptor
                + invoke(passwords: String, key: String): List<PasswordDto>
            }
            class InsertAllPasswords {
                - passwordRepository: PasswordRepository
                + invoke(passwords: List<PasswordDto>)
            }
        }
        package sv {
            class ReadSv {
                - fileEncryptor: FileEncryptor
                - context: Context
                + invoke(uri: Uri, password: String): List<PasswordDto>
            }
            class WriteSv {
                - encryptor: FileEncryptor
                - context: Context
                + invoke(uri: Uri, passwords: List<PasswordDto>, password: String)
            }
        }
    }
    package ui.adapter {
        class PasswordAdapter {
            - diffUtil: DiffUtil.ItemCallback<PasswordDto>
            - asyncListDiffer: AsyncListDiffer<PasswordDto>
            + onCreateViewHolder(parent: ViewGroup, viewType: Int): PasswordViewHolder
            + onBindViewHolder(holder: PasswordViewHolder, position: Int)
            + getItemCount(): Int
            + updatePasswords(newPasswords: List<PasswordDto>)
        }
        class PasswordViewHolder {
            + binding: PasswordItemBinding
            + render(passwordDto: PasswordDto)
        }
    }
    package ui.biometrics {
        class BiometricPromptManager {
            - activity: AppCompatActivity
            - resultChannel: Channel<BiometricResult>
            + promptResults: Flow<BiometricResult>
            + showBiometricPrompt(title: String, description: String, cryptoObject: BiometricPrompt.CryptoObject?)
        }
    }

di.DefaultDispatcherProvider --|> di.DispatcherProvider
di.DispatcherModule --> di.DispatcherProvider
di.DispatcherModule --> di.DefaultDispatcherProvider

di.MasterPasswordRepositoryModule --> domain.repository.MasterPasswordRepository
di.MasterPasswordRepositoryModule --> data.repository.MasterPasswordRepositoryImpl
di.MasterPasswordRepositoryModule --> data.storage.AppKeyStorage

di.MoshiModule --> com.squareup.moshi.Moshi

di.NbvcxzModule --> me.gosimple.nbvcxz.Nbvcxz

di.PasswordRepositoryModule --> domain.repository.PasswordRepository
di.PasswordRepositoryModule --> data.repository.PasswordRepositoryImpl
di.PasswordRepositoryModule --> data.json.storage.PasswordStorage
di.PasswordRepositoryModule --> data.json.crypto.FileEncryptor

data.repository.MasterPasswordRepositoryImpl --|> domain.repository.MasterPasswordRepository
data.repository.MasterPasswordRepositoryImpl --> data.storage.AppKeyStorage
data.repository.MasterPasswordRepositoryImpl --> data.crypto.AppKeyProvider
data.repository.MasterPasswordRepositoryImpl --> data.crypto.BiometricKeyManager
data.repository.MasterPasswordRepositoryImpl --> data.crypto.PasswordKeyManager
data.repository.MasterPasswordRepositoryImpl --> data.crypto.AppKeyEncryptor

data.repository.PasswordRepositoryImpl --|> domain.repository.PasswordRepository
data.repository.PasswordRepositoryImpl --> data.json.storage.PasswordStorage
data.repository.PasswordRepositoryImpl --> data.json.crypto.FileEncryptor
data.repository.PasswordRepositoryImpl --> data.crypto.AppKeyProvider
data.repository.PasswordRepositoryImpl ..> data.json.model.Password : uses in cache

data.json.crypto.FileEncryptor --> com.squareup.moshi.Moshi
data.json.crypto.FileEncryptor --> data.crypto.PasswordKeyManager
data.json.crypto.FileEncryptor --> data.crypto.AppKeyEncryptor
data.json.crypto.FileEncryptor ..> data.json.model.Password : processes list of

data.csv.formatter.CsvFormatter ..> data.json.model.Password : processes list of
data.csv.storage.CsvStorage --> data.csv.formatter.CsvFormatter

data.mapper.PasswordMapper ..> data.json.model.Password : maps from/to
data.mapper.PasswordMapper ..> domain.model.PasswordDto : maps from/to

domain.usecases.EstimatePassword --> me.gosimple.nbvcxz.Nbvcxz

domain.usecases.auth.AuthenticateBiometrics --> domain.biometric.BiometricAuthenticator
domain.usecases.auth.GenerateAppKey --> domain.repository.MasterPasswordRepository
domain.usecases.auth.GenerateBiometricKey --> domain.repository.MasterPasswordRepository
domain.usecases.auth.GetDecryptCryptoObject --> domain.repository.MasterPasswordRepository
domain.usecases.auth.GetDecryptCryptoObject --> data.crypto.BiometricKeyManager
domain.usecases.auth.GetEncryptCryptoObject --> data.crypto.BiometricKeyManager
domain.usecases.auth.IsAppKeyConfigured --> domain.repository.MasterPasswordRepository
domain.usecases.auth.IsBiometricConfigured --> domain.repository.MasterPasswordRepository
domain.usecases.auth.UnlockKeyWithBiometrics --> domain.repository.MasterPasswordRepository
domain.usecases.auth.UnlockKeyWithPassword --> domain.repository.MasterPasswordRepository

domain.usecases.csv.ReadCsv --> data.csv.storage.CsvStorage
domain.usecases.csv.ReadCsv --> data.mapper.PasswordMapper
domain.usecases.csv.WriteCsv --> data.csv.storage.CsvStorage
domain.usecases.csv.WriteCsv --> data.mapper.PasswordMapper

domain.usecases.generator.GeneratePassphrase --> data.generator.PasswordGenerator
domain.usecases.generator.GeneratePassword --> data.generator.PasswordGenerator

domain.usecases.password.AddPassword --> domain.repository.PasswordRepository
domain.usecases.password.AddPassword --> data.mapper.PasswordMapper
domain.usecases.password.DeleteAllPasswords --> domain.repository.PasswordRepository
domain.usecases.password.DeletePassword --> domain.repository.PasswordRepository
domain.usecases.password.DeletePassword --> data.mapper.PasswordMapper
domain.usecases.password.GetAllPasswords --> domain.repository.PasswordRepository
domain.usecases.password.GetAllPasswords --> data.mapper.PasswordMapper
domain.usecases.password.GetPasswordsByName --> domain.repository.PasswordRepository
domain.usecases.password.GetPasswordsByName --> data.mapper.PasswordMapper
domain.usecases.password.GetPasswordsFromEncrypted --> data.json.crypto.FileEncryptor
domain.usecases.password.GetPasswordsFromEncrypted --> data.mapper.PasswordMapper
domain.usecases.password.InsertAllPasswords --> domain.repository.PasswordRepository
domain.usecases.password.InsertAllPasswords --> data.mapper.PasswordMapper

domain.usecases.sv.ReadSv --> data.json.crypto.FileEncryptor
domain.usecases.sv.ReadSv --> data.mapper.PasswordMapper
domain.usecases.sv.WriteSv --> data.json.crypto.FileEncryptor
domain.usecases.sv.WriteSv --> data.mapper.PasswordMapper

domain.backup.BackupManager --> data.storage.BackupStorage
domain.backup.BackupManager --> data.json.crypto.FileEncryptor
domain.backup.BackupManager --> domain.usecases.sv.ReadSv
domain.backup.BackupManager --> domain.repository.PasswordRepository
domain.backup.BackupManager --> di.DispatcherProvider
domain.backup.BackupManager --> data.crypto.AppKeyProvider
domain.backup.BackupManager --> data.mapper.PasswordMapper

ui.viewmodel.BiometricViewModel --> domain.usecases.auth.GenerateBiometricKey
ui.viewmodel.BiometricViewModel --> domain.usecases.auth.AuthenticateBiometrics
ui.viewmodel.BiometricViewModel --> domain.usecases.auth.GetEncryptCryptoObject
ui.viewmodel.BiometricViewModel ..> ui.biometrics.BiometricPromptManager : uses

ui.viewmodel.HomeViewModel --> domain.usecases.password.GetAllPasswords
ui.viewmodel.HomeViewModel --> domain.usecases.password.GetPasswordsByName
ui.viewmodel.HomeViewModel --> di.DispatcherProvider

ui.viewmodel.LoginViewModel --> domain.usecases.auth.UnlockKeyWithPassword
ui.viewmodel.LoginViewModel --> domain.usecases.auth.UnlockKeyWithBiometrics
ui.viewmodel.LoginViewModel --> domain.usecases.auth.IsBiometricConfigured
ui.viewmodel.LoginViewModel --> domain.usecases.auth.AuthenticateBiometrics
ui.viewmodel.LoginViewModel --> domain.usecases.auth.GetDecryptCryptoObject
ui.viewmodel.LoginViewModel --> di.DispatcherProvider
ui.viewmodel.LoginViewModel ..> ui.biometrics.BiometricPromptManager : uses

ui.viewmodel.MainViewModel --> domain.usecases.auth.IsAppKeyConfigured

ui.viewmodel.RegisterViewModel --> domain.usecases.EstimatePassword
ui.viewmodel.RegisterViewModel --> domain.usecases.auth.GenerateAppKey
ui.viewmodel.RegisterViewModel --> domain.usecases.auth.IsAppKeyConfigured

ui.viewmodel.SettingsViewModel --> domain.usecases.auth.IsBiometricConfigured
ui.viewmodel.SettingsViewModel --> domain.usecases.password.DeleteAllPasswords
ui.viewmodel.SettingsViewModel --> domain.backup.BackupManager
ui.viewmodel.SettingsViewModel --> domain.usecases.password.GetAllPasswords
ui.viewmodel.SettingsViewModel --> di.DispatcherProvider

ui.viewmodel.dialogs.CreatePasswordViewModel --> domain.usecases.password.AddPassword

ui.viewmodel.dialogs.ExportPasswordViewModel --> domain.usecases.csv.WriteCsv
ui.viewmodel.dialogs.ExportPasswordViewModel --> domain.usecases.sv.WriteSv
ui.viewmodel.dialogs.ExportPasswordViewModel --> domain.usecases.password.GetAllPasswords
ui.viewmodel.dialogs.ExportPasswordViewModel --> di.DispatcherProvider

ui.viewmodel.dialogs.GeneratePasswordViewModel --> domain.usecases.generator.GeneratePassword
ui.viewmodel.dialogs.GeneratePasswordViewModel --> domain.usecases.generator.GeneratePassphrase
ui.viewmodel.dialogs.GeneratePasswordViewModel --> domain.usecases.EstimatePassword
ui.viewmodel.dialogs.GeneratePasswordViewModel --> di.DispatcherProvider

ui.viewmodel.dialogs.ImportPasswordViewModel --> domain.usecases.password.GetPasswordsFromEncrypted
ui.viewmodel.dialogs.ImportPasswordViewModel --> domain.usecases.csv.ReadCsv
ui.viewmodel.dialogs.ImportPasswordViewModel --> domain.usecases.password.InsertAllPasswords
ui.viewmodel.dialogs.ImportPasswordViewModel --> di.DispatcherProvider

ui.viewmodel.dialogs.PasswordDetailViewModel --> domain.usecases.password.AddPassword
ui.viewmodel.dialogs.PasswordDetailViewModel --> domain.usecases.password.DeletePassword

ui.view.BiometricActivity --> ui.viewmodel.BiometricViewModel

ui.view.HomeActivity --> ui.viewmodel.HomeViewModel
ui.view.HomeActivity --> ui.adapter.PasswordAdapter
ui.view.HomeActivity ..> ui.view.dialogs.CreatePasswordDialog : shows

ui.view.LoginActivity --> ui.viewmodel.LoginViewModel

ui.view.MainActivity --> ui.viewmodel.MainViewModel
ui.view.MainActivity ..> ui.view.RegisterActivity : starts
ui.view.MainActivity ..> ui.view.LoginActivity : starts

ui.view.RegisterActivity --> ui.viewmodel.RegisterViewModel
ui.view.RegisterActivity ..> ui.view.BiometricActivity : starts

ui.view.SettingsActivity --> ui.viewmodel.SettingsViewModel
ui.view.SettingsActivity --> utils.FilePicker
ui.view.SettingsActivity ..> ui.view.dialogs.ChangeMasterPasswordDialog : shows
ui.view.SettingsActivity ..> ui.view.dialogs.ExportPasswordDialog : shows
ui.view.SettingsActivity ..> ui.view.dialogs.ImportPasswordDialog : shows
ui.view.SettingsActivity ..> ui.view.BiometricActivity : starts

ui.view.dialogs.ChangeMasterPasswordDialog --> ui.viewmodel.RegisterViewModel

ui.view.dialogs.CreatePasswordDialog --> ui.viewmodel.dialogs.CreatePasswordViewModel
ui.view.dialogs.CreatePasswordDialog ..> ui.view.dialogs.GeneratePasswordDialog : shows

ui.view.dialogs.ExportPasswordDialog --> utils.FilePicker
ui.view.dialogs.ExportPasswordDialog --> ui.viewmodel.dialogs.ExportPasswordViewModel

ui.view.dialogs.GeneratePasswordDialog --> ui.viewmodel.dialogs.GeneratePasswordViewModel

ui.view.dialogs.ImportPasswordDialog --> utils.FilePicker
ui.view.dialogs.ImportPasswordDialog --> ui.viewmodel.dialogs.ImportPasswordViewModel

ui.view.dialogs.PasswordDetailDialog --> ui.viewmodel.dialogs.PasswordDetailViewModel

ui.adapter.PasswordAdapter *-- ui.adapter.PasswordViewHolder : creates & manages
ui.adapter.PasswordAdapter ..> ui.view.dialogs.PasswordDetailDialog : shows
ui.adapter.PasswordViewHolder ..> domain.model.PasswordDto : renders

ui.biometrics.BiometricPromptManager --|> domain.biometric.BiometricAuthenticator

class SecureVaultApp

}
@enduml
